@page "/regions-new"
@using Catalog.Infrastructure.Services
@using Catalog.Infrastructure.Entities
@using Catalog.Web.Dtos
@using Catalog.Web.Helpers
@using AutoMapper
@inject IMapper Mapper
@inject ISnackbar SnackBar
@inject IRegionService RegionService
@inject ICountryService CountryService

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Regions</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="_regionDto.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="_regionDto.ShortName" Label="ShortName" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="_regionDto.CountryId" Label="CountryId" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="_regionDto.StartDate" Label="StartDate" Variant="Variant.Text" Margin="Margin.Normal" placeholder="dd/MM/yyyy"></MudTextField>
        <MudTextField @bind-Value="_regionDto.FinishDate" Label="FinishDate" Variant="Variant.Text" Margin="Margin.Normal" placeholder="dd/MM/yyyy"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Country</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetRegions()" Filter="new Func<RegionDto, bool>(Search)" @bind-customer="_regionDto">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Countries</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Countries..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>ShortName</MudTh>
        <MudTh>CountryId</MudTh>
        <MudTh>StartDate</MudTh>
        <MudTh>FinishDate</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="ShortName">@context.ShortName</MudTd>
        <MudTd DataLabel="Code">@context.CountryId</MudTd>
        <MudTd DataLabel="Code">@context.StartDate</MudTd>
        <MudTd DataLabel="Code">@context.FinishDate</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private bool hover = false;
    private string searchString = "";

    private RegionDto _regionDto = new RegionDto();
    private List<RegionDto> _regions = new List<RegionDto>();

    protected override void OnInitialized()
    {
        GetRegions();
    }

    private List<RegionDto> GetRegions()
    {
        _regions = RegionService.Get()?.Select(c => c.AsDto())?.ToList();
        return _regions;
    }

    private bool Search(RegionDto regionDto)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (regionDto.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || regionDto.ShortName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        var item = Mapper.Map<Region>(_regionDto);

        var country = CountryService.GetById(Convert.ToInt64(_regionDto.CountryId));
        if (country != null)
        {
            item.Country = country;
            RegionService.Save(item);
            SnackBar.Add("Region Saved", Severity.Success);
            GetRegions();
        }
        else
        {
            SnackBar.Add("Region Not Saved", Severity.Error);
        }
    }

    private void Edit(long id)
    {
        _regionDto = _regions.FirstOrDefault(c => c.Id == id);
    }

    private void Delete(long id)
    {
        RegionService.Delete(id);
        SnackBar.Add("Region Deleted", Severity.Success);
        GetRegions();
    }
}